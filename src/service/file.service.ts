import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { FileData, FileStatus } from '../model/file_model';
import { catchError, tap } from 'rxjs/operators';


@Injectable({
  providedIn: 'root'
})
export class FileService {
  private apiUrl = 'http://localhost:8080/api/files';

  constructor(private http: HttpClient) {}

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á Authorization Header
  private getAuthHeaders(): HttpHeaders {
    const token = localStorage.getItem('accessToken');
    if (!token) {
      console.warn("‚ö†Ô∏è Warning: No access token found!");
      return new HttpHeaders(); // ‡∏™‡πà‡∏á Header ‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Error
    }
    return new HttpHeaders({
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    });
  }




  // ‚úÖ ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  getUserFiles(): Observable<FileData[]> {
    const token = localStorage.getItem('accessToken');
    const headers = new HttpHeaders({ 'Authorization': `Bearer ${token}` });

    console.log("üîÑ Fetching user files...");

    return this.http.get<FileData[]>(`${this.apiUrl}/user`, { headers }).pipe(
        tap(response => {
            console.log("‚úÖ Files received from API:", response);
        }),
        catchError(error => {
            console.error("‚ùå API Error:", error);
            return throwError(() => new Error(error));
        })
    );
}




uploadFile(file: FileData): Observable<FileData> {
  if (!file.localFile) {
      console.error("‚ùå Error: localFile is undefined!");
      return throwError(() => new Error("File is missing"));
  }

  const formData = new FormData();
  formData.append('file', file.localFile as Blob);
  formData.append('senderEmail', file.senderEmail || 'unknown@example.com');
  formData.append('fileType', file.fileType || '');

  const token = localStorage.getItem('accessToken');
  const headers = new HttpHeaders({ 'Authorization': `Bearer ${token}` });

  return this.http.post<FileData>(`${this.apiUrl}/upload`, formData, { headers }).pipe(
      tap(response => console.log("‚úÖ File uploaded and confirmed:", response.status)) // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏±‡∏ö `CONFIRMED`
  );
}




  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏ü‡∏•‡πå
  updateFileStatus(fileId: number, status: FileStatus): Observable<FileData> {
    return this.http.put<FileData>(`${this.apiUrl}/update-status/${fileId}`, { status }, { headers: this.getAuthHeaders() })
      .pipe(catchError(this.handleError));
  }

  // ‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Backend

  deleteFile(fileId: number): Observable<void> {
    console.log("üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ DELETE ‡πÑ‡∏õ‡∏ó‡∏µ‡πà API:", fileId);
    const token = localStorage.getItem('accessToken');

    if (!token) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Token ‡πÉ‡∏ô LocalStorage");
        return throwError(() => new Error("Unauthorized: No Token Available"));
    }

    const headers = new HttpHeaders({
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
    });

    return this.http.delete<void>(`${this.apiUrl}/${fileId}`, { headers });
}



  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error
  private handleError(error: any): Observable<never> {
    console.error("‚ùå API Error:", error);
    return throwError(() => new Error(error.message || "An error occurred"));
  }
}
