import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthService } from '../../service/auth_service';
import { ToastrService } from 'ngx-toastr';
import { Router } from '@angular/router';

@Component({
  selector: 'app-loginckan',
  templateUrl: './loginckan.component.html',
  styleUrls: ['./loginckan.component.css']
})
export class LoginckanComponent implements OnInit {
  loginForm!: FormGroup;
  isLoading: boolean = false;  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,  // ‡πÉ‡∏ä‡πâ AuthService
    private toastr: ToastrService,
    private router: Router
  ) {}

  ngOnInit() {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],  // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      password: ['', Validators.required]  // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    });
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
  login() {
    if (this.loginForm.invalid) {
      this.toastr.warning('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      return;
    }

    this.isLoading = true;

    const email = this.loginForm.value.email;
    const password = this.loginForm.value.password;

    console.log("üîç Sending Login Request:", { email, password });

    this.authService.login(email, password).subscribe({
      next: (response) => {
        console.log("‚úÖ API Response:", response);

        if (response.accessToken && response.refreshToken) {
          this.authService.storeTokens(response.accessToken, response.refreshToken);

          console.log("üìå Access Token Stored:", localStorage.getItem('accessToken'));
          console.log("üìå Refresh Token Stored:", localStorage.getItem('refreshToken'));

          // ‚úÖ ‡∏î‡∏∂‡∏á Email ‡∏à‡∏≤‡∏Å Token ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô Local Storage
          try {
            const tokenPayload = JSON.parse(atob(response.accessToken.split('.')[1]));
            if (tokenPayload.email) {
              localStorage.setItem('userEmail', tokenPayload.email);
              console.log("üìß Stored User Email:", tokenPayload.email);
            } else {
              console.warn("‚ö†Ô∏è No email found in token payload");
            }
          } catch (error) {
            console.error("‚ùå Error decoding token:", error);
          }

          this.isLoading = false;
          this.router.navigate(['/mainpage']);  // ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ MainPage ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        } else {
          this.toastr.error('‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡πÉ‡∏ô response', '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
          console.error("üö® No token in API response");
          this.isLoading = false;
        }
      },
      error: (err) => {
        console.error('‚ùå Error occurred:', err);
        this.toastr.error(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö', '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
        this.isLoading = false;
      }
    });
  }
}
